% ELUSEV.FOCUSED.INITIALIZE (PROTECTED)
%   Build the remoteclass ELUSEV.FOCUSED.
%
%   OBJ = OBJ.INITIALIZE() returns a generic ELUSEV.FOCUSED instance.
%
%   OBJ = OBJ.INITIALIZE(DEBUG) returns a generic ELUSEV.FOCUSED instance using the
%   DEBUG value (1 is enabling the debug mode).
%
%   OBJ = OBJ.INITIALIZE(NAME, DESC, DEBUG) returns an ELUSEV.FOCUSED instance with
%   its name and description values set to NAME and DESC (character values).
%
%   OBJ = OBJ.INITIALIZE(NAME, DESC, PARNAME, PARVALUE, ..., DEBUG) returns an
%   ELUSEV.FOCUSED instance with parameters PARSNAME set to PARSVALUE.
%
%   Dedicated parameters:
%
%     - TWFREQ (single) sets the focused emission frequency.
%       [1 20] MHz
%     - NBHCYCLE (int32) sets the number of half cycle.
%       [1 200]
%     - POLARITY (int32) sets the waveform polarity.
%       -1 = negative 1st arch, 1 = positive 1st arch - default = 1
%     - STEERANGLE  (single) sets the steering angles.
%       [-45 45] deg
%     - FOCUS  (single) sets the focal depth [0 100] mm
%     - PAUSE (int32) sets the pause duration after focused events.
%       [system.hardware.MinNoop 1e6] us
%     - PAUSEEND (int32) sets the pause duration at the end of the ELUSEV.
%       [system.hardware.MinNoop 1e6] us
%     - DUTYCYCLE (single) sets the maximum duty cycle.
%       [0 1]
%     - TXCENTER (single) sets the transmission center position.
%       [0 100] mm
%     - TXWIDTH (single) sets the transmission width.
%       [0 100] mm
%     - APODFCT (char) sets the apodisation function.
%       none, bartlett, blackman, connes, cosine, gaussian, hamming, hanning,
%       welch
%     - RXFREQ (single) sets the sampling frequency.
%       [1 60] MHz
%     - RXCENTER (single) sets the reception center position.
%       [0 100] mm
%     - RXDURATION (single) sets the acquisition duration.
%       [0 1000] us
%     - RXDELAY (single) sets the acquisition delay.
%       [0 1000] us
%     - RXBANDWIDTH (int32) sets the decimation mode.
%       1 = 200%, 2 = 100%, 3 = 50% - default = 1
%     - FIRBANDWIDTH (int32) sets the digital filter coefficients.
%       -1 = none, [0 100] = pre-calculated - default = 100
%     - PULSEINV (int32) enables the pulse inversion mode.
%       0 = no pulse inversion, 1 = pulse inversion - default = 0
%
%   Inherited parameters:
%     - TRIGIN (int32) enables the trigger in.
%       0 = no trigger in, 1 = trigger in - default = 0
%     - TRIGOUT (single) enables the trigger out.
%       0 = no trigger out, [1e-3 720.8] us = trigger out duration - default = 0
%     - TRIGOUTDELAY (single) sets the trigger out delay.
%       [0 1000] us = trigger out delay - default = 0
%     - TRIGALL (int32) enables triggers on all events.
%       0 = triggers on 1st event, 1 = triggers on all events - default = 0
%     - REPEAT (int32) sets the number of ELUSEV repetition.
%       [1 Inf] - default = 1

%   Note - This function is defined as a method of the remoteclass ELUSEV.FOCUSED.
%   It cannot be used without all methods of the remoteclass ELUSEV.FOCUSED and all
%   methods of its superclass ELUSEV.ELUSEV developed by SuperSonic Imagine and
%   without a system with a REMOTE server running.
%
%   Copyright 2010 Supersonic Imagine
%   Revision: 1.00 - Date: 2010/08/04

function obj = initialize(obj, varargin)
   
% ============================================================================ %
% ============================================================================ %

current_class = 'elusev.focused';

% Start error handling
try

% ============================================================================ %
% ============================================================================ %

% Initialize superclass
obj = initialize@elusev.elusev(obj, varargin{1:end});

% ============================================================================ %
% ============================================================================ %

%% Add new parameters

% Flat emission frequency
Par = common.parameter( ...
    'TwFreq', ...
    'single', ...
    'sets the focused emission frequency', ...
    {[1 system.hardware.MaxTxFreq]}, ...
    {'focused emission frequency [MHz]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Number of half cycle
Par = common.parameter( ...
    'NbHcycle', ...
    'int32', ...
    'sets the number of half cycle', ...
    {[1 200]}, ...
    {'number of half cycle'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Waveform polarity (default = 1)
Par = common.parameter( ...
    'Polarity', ...
    'int32', ...
    'sets the waveform polarity', ...
    {-1 1}, ...
    {'negative first arch', 'positive first arch'}, ...
    obj.Debug, current_class );
Par = Par.setValue(1);
obj = obj.addParam(Par);

% ============================================================================ %

% Steer angles
Par = common.parameter( ...
    'SteerAngle', ...
    'single', ...
    'sets the focused angles', ...
    {[-40 40]}, ...
    {'focused angles [deg]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% Axial position of the focus
Par = common.parameter( ...
    'Focus', ...
    'single', ...
    'sets the focus axial position', ...
    {[0 100]}, ...
    {'axial position [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Pause duration after focused
Par = common.parameter( ...
    'Pause', ...
    'int32', ...
    'sets the pause duration after focused events', ...
    {[system.hardware.MinNoop 1e6]}, ...
    {'pause duration after focused events [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Pause duration at the end
Par = common.parameter( ...
    'PauseEnd', ...
    'int32', ...
    'sets the pause duration at the end of the ELUSEV', ...
    {[system.hardware.MinNoop 1e6]}, ...
    {'pause duration at the end [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Maximum duty cycle
Par = common.parameter( ...
    'DutyCycle', ...
    'single', ...
    'sets the maximum duty cycle', ...
    {[0 1]}, ...
    {'maximum duty cycle'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Aperture center position
Par = common.parameter( ...
    'TxCenter', ...
    'single', ...
    'sets the transmission center position', ...
    {[-Inf Inf]}, ...
    {'aperture center position [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Aperture width
Par = common.parameter( ...
    'TxWidth', ...
    'single', ...
    'sets the transmission width', ...
    {[0 Inf]}, ...
    {'aperture width [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Apodisation function
Par = common.parameter( ...
    'ApodFct', ...
    'char', ...
    'sets the apodisation function', ...
    {'none' 'bartlett' 'blackman' 'connes' 'cosine' 'gaussian' 'hamming' ...
        'hanning' 'welch'}, ...
    {'no apodisation' 'bartlett function' 'blackman function' ...
        'connes function' 'cosine function' 'gaussian function' ...
        'hamming function' 'hanning function' 'welch function'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% focused reception frequency
Par = common.parameter( ...
    'RxFreq', ...
    'single', ...
    'sets the sampling frequency', ...
    {[1 60]}, ...
    {'focused reception frequency [MHz]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Receive center position
Par = common.parameter( ...
    'RxCenter', ...
    'single', ...
    'sets the receive center position', ...
    {[0 Inf]}, ...
    {'receive center position [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Acquisition duration
Par = common.parameter( ...
    'RxDuration', ...
    'single', ...
    'sets the acquisition duration', ...
    {[0 1000]}, ...
    {'acquisition duration [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Acquisition delay
Par = common.parameter( ...
    'RxDelay', ...
    'single', ...
    'sets the acquisition delay', ...
    {[0 1000]}, ...
    {'acquisition delay [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Decimation mode (default = 1)
Par = common.parameter( ...
    'RxBandwidth', ...
    'int32', ...
    'sets the decimation mode', ...
    {1 2 3}, ...
    {'no decimation', '100% mode', '50% mode'}, ...
    obj.Debug, current_class );
Par = Par.setValue(1);
obj = obj.addParam(Par);

% ============================================================================ %

% Definition of the digital filter coefficients (default = 100)
Par = common.parameter( ...
    'FIRBandwidth', ...
    'int32', ...
    'sets the digital filter coefficients', ...
    {-1 [0 100]}, ...
    {'FIR BP coeffs for impulse', 'Load pre-calculated FIR BP coeffs'}, ...
    obj.Debug, current_class );
Par = Par.setValue(100);
obj = obj.addParam(Par);

% ============================================================================ %

% Pulse inversion (default = 0)
Par = common.parameter( ...
    'PulseInv', ...
    'int32', ...
    'enables the pulse inversion mode', ...
    {0 1}, ...
    {'no pulse inversion' 'pulse inversion enabled'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

Par = common.parameter( ...
    'TxPolarity', ...
    'int32', ...
    'Set the elements polarity of successive Tx for each focused line', ...
    {[0 1]}, ...
    {'0: Standard polarity, 1:Inverted polarity'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

Par = common.parameter( ...
    'TxElemsPattern', ...
    'int32', ...
    'Set the elements pattern of successive Tx for each focused line', ...
    {[0 2]}, ...
    {'0: All elements, 1: Odd elements, 2: Even elements'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %
% ============================================================================ %

%% End error handling
catch Exception
    
    % Exception in this method
    if ( isempty(Exception.identifier) )
        
        % Emit the new exception
        NewException = ...
            common.legHAL.GetException(Exception, class(obj), 'initialize');
        throw(NewException);

    % Re-emit previous exception
    else
        
        rethrow(Exception);
        
    end
    
end

% ============================================================================ %
% ============================================================================ %

end