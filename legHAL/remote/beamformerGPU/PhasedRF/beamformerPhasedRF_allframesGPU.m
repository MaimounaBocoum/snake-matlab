function [RFf] = beamformerPhasedRF_allframesGPU(BF,buff,numBuff)
%BEAMFORMERPHASEDRF_ALLFRAMESGPU beamformerPhasedRF_allframes adapted to GPU from
%                                mexFile of Mathie Pernot
%                                Mafalda Correia, October 2014
% BF = Beamformer parameters
% 

bf_flag='Mafalda_rf_beamform_kernel_rectgrid200_source_frames';
scanconvertflag = 0;

   
k = parallel.gpu.CUDAKernel('bf_kernel.ptx','bf_kernel.cu',bf_flag);
%N = 1024;
k.ThreadBlockSize = [16,8,1];
k.GridSize = round([BF.nbPixelsPerLine/k.ThreadBlockSize(1),BF.nbThetaRecon/k.ThreadBlockSize(2),1]);
k.SharedMemorySize = 3000;
setConstantMemory(k,...
    'NB_ACQ_CHANNELS',int32(128),...
    'NB_MAX_SOURCES',int32(5000),...
    'm_speedOfSound',single(BF.speedOfSound),...
    'm_invSpeedOfSound',single(1./BF.speedOfSound),...
    'm_piezoPitch',single(BF.piezoPitch),...
    'm_sampFreq',single(BF.sampFreq),... 
    'm_rOrigin',single(BF.rOrigin),...
    'm_fNumber',single(BF.fNumber),...
    'm_peakDelay',single(BF.peakDelay),...
    'm_xSource',single(BF.xSource),...
    'm_zSource',single(BF.zSource),...
    'm_zApex',single(BF.zApex),...
    'm_linePitch',single(BF.linePitch),...
    'm_pixelPitch',single(BF.pixelPitch),...
    'm_lambda',single(BF.lambda),...
    'm_thetaOrigin',single(BF.thetaOrigin),...
    'm_nbPiezos',int32(BF.nbPiezos),...
    'm_nbSources',int32(BF.nbSources),...
    'm_channelOffset',int32(BF.channelOffset),...
    'm_firstSample',int32(BF.firstSample),...
    'm_nbSamples',int32(BF.nbSamples),...
    'm_nbLinesPerRecon',int32(BF.nbLinesPerRecon),...
    'm_nbPixelsPerLine',int32(BF.nbPixelsPerLine),...
    'm_nbRecon',int32(BF.nbRecon),...
    'm_normMode',int32(BF.normMode),...
    'm_synthAcq',int32(BF.synthAcq),...
    'm_frame_per_frame',int32(BF.frame_per_frame),...
    'm_idxTransmitToBeamform',int32(BF.idxTransmitToBeamform),...
    'm_idxFrame',int32(BF.idxFrame),...
    'm_nbImages',int32(BF.nbImages),...
    'm_usegpu',int32(BF.usegpu)...
    );

RFout = gpuArray(single(zeros(BF.nbPixelsPerLine,BF.nbRecon,BF.nbImages*BF.nbSources)));
clear RFf
g = gpuDevice;
BUFFER1 = buff{numBuff}.data;
tic
[RF1] = feval(k,RFout,BUFFER1,int32(numel(buff{nummBuff}.data)-buff{numBuff}.alignedOffset/2)
RF1 = gather(RF1);
toc
[RF1] = feval(k,RFout,BUFFER1(rep,:),int32(numel(buff{rep}{1}.data)-buff{rep}{1}.alignedOffset/2),single(Px{machine}(:)),single(Py{machine}(:)),single(Pz{machine}(:)),buff{rep}{1}.alignedOffset/2,int32((i-1)*nbloopframe),int32(i*nbloopframe));

end

