function [rf InfoStruct] = AcqProbeCharac(Charac)


ELUSEV = elusev.characterization( ...
    'TrigIn', 0, ...
    'TrigOut', 0, ...
    'TrigAll', 0, ...
    'CharactElements', Charac.CharactElements, ...
    'RxFreq', Charac.RxFreq, ...
    'RxDelay', Charac.RxDelay, ...
    'RxDuration', Charac.RxDuration, ...
    'Pause', Charac.Pause, ...
    'PauseEnd', Charac.PauseEnd, ...
    'Waveform',Charac.Waveform,...
    0);

% ACMO for the sequence
ACMO = acmo.acmo( ...
    'elusev', ELUSEV, ...
    'ControlPts', Charac.TGC, ...
    0);

% USSE for the sequence
SEQ = usse.usse( ...
    'acmo', ACMO, ...
    ... 'Repeat', Repeat_seq, ...
    'TPC', remote.tpc('imgVoltage', Charac.Voltage, 'imgCurrent', 1), ...
    'Popup',0, ...
    'Repeat',Inf,...
    'DropFrames',1,...
    0);

% Build remote structure
[Sequence NbAcq] = SEQ.buildRemote();
InfoStruct = Sequence.InfoStruct;

% Sequence execution

% Initialize & load sequence remote
Sequence = Sequence.initializeRemote( 'IPaddress', Charac.AixplorerIP, 'InitTGC',Charac.TGC, 'InitRxFreq',Charac.RxFreq );
Sequence = Sequence.loadSequence();
Sequence = Sequence.startSequence( 'Wait', 1 );
clear bufData;
for k=1:Charac.NbAcq
    bufData(k) = Sequence.getData( 'Realign', 2 );
end
Sequence = Sequence.stopSequence( 'Wait', 0 );

rf = zeros(InfoStruct.event(1).numSamples,length(Charac.CharactElements),Charac.NbAcq);

for idxAcq=1:Charac.NbAcq
    
    for idxChann=1:length(Charac.CharactElements)
        channel = Charac.CharactElements(idxChann);      
        rf(:,idxChann,idxAcq) = bufData(idxAcq).RFdata(:,channel,idxChann);
    end
end