

function obj = initialize(obj, varargin)
   
% ============================================================================ %
% ============================================================================ %

current_class = 'system.rs232';

% Start error handling
try

% ============================================================================ %
% ============================================================================ %

% Initialize COMMON.REMOTEOBJ superclass
obj = initialize@common.object(obj, varargin{1:end});

% ============================================================================ %
% ============================================================================ %

%% Add new parameters

% TODO: handle existance of the port
Par = common.parameter( ...
    'Port', ...
    'char', ...
    'sets port of the serial connection', ...
    {}, ...
    {}, ...
    obj.Debug, current_class );

Par = Par.setValue('ttyS0'); % Linux 1st serial port
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'BaudRate', ...
    'int32', ...
    'sets the baudrate of the serial connection [bits/s]', ...
    { 110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, 115200, 128000, 256000 }, ...
    { '110', '300', '600', '1200', '2400', '4800', '9600', '14400', '19200', '38400', '57600', '115200', '128000', '256000'}, ...
    obj.Debug, current_class );

Par = Par.setValue(9600);
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'DataBits', ...
    'int32', ...
    'sets the number of data bits of the serial connection', ...
    { [ 5 8 ] }, ...
    {'Serial number of data bits'}, ...
    obj.Debug, current_class );

Par = Par.setValue(8);
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'StopBits', ...
    'int32', ...
    'sets the stop bits of the serial connection', ...
    { [ 0 1 ] }, ...
    {'Serial stop bits'}, ...
    obj.Debug, current_class );

Par = Par.setValue(1);
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'Parity', ...
    'int32', ...
    'sets the parity of the serial connection', ...
    { [ 0 1 ] }, ...
    {'Serial sparity'}, ...
    obj.Debug, current_class );

Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'EndLine', ...
    'int32', ...
    'sets the end line to add when writing to the serial connection', ...
    { 0, 1, 2 }, ...
    { 'no end message', 'add \r at the end', 'add \r at the end' }, ...
    obj.Debug, current_class );

Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'Timeout', ...
    'int32', ...
    'sets the time to wait betwenn write and read data on the serial connection', ...
    { [ 0 Inf ] }, ...
    {'Serial time to wait betwenn write and read [ms]'}, ...
    obj.Debug, current_class );

Par = Par.setValue(100);
obj = obj.addParam(Par);

% ============================================================================ %
% ============================================================================ %

%% End error handling
catch Exception
    
    % Exception in this method
    if ( isempty(Exception.identifier) )
        
        % Emit the new exception
        NewException = ...
            common.legHAL.GetException(Exception, class(obj), 'initialize');
        throw(NewException);

    % Re-emit previous exception
    else
        
        rethrow(Exception);
        
    end
    
end

% ============================================================================ %
% ============================================================================ %

end
