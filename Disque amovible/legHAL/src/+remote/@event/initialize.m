% REMOTE.EVENT.INITIALIZE (PROTECTED)
%   Create a REMOTE.EVENT instance.
%
%   OBJ = OBJ.INITIALIZE() creates a generic REMOTE.EVENT instance.
%
%   OBJ = OBJ.INITIALIZE(NAME, DESC, DEBUG) creates a REMOTE.EVENT instance with
%   its name and description values set to NAME and DESC (character values) and
%   using the DEBUG value (1 is enabling the debug mode).
%
%   OBJ = OBJ.INITIALIZE(NAME, DESC, PARNAME, PARVALUE, ..., DEBUG) creates a
%   REMOTE.EVENT instance with parameters PARSNAME set to PARSVALUE.
%
%   Dedicated parameters:
%     - TXID (int32) sets the transmit id.
%       0 = none, [1 Inf] - default = 0
%     - RXID (int32) sets the receive id.
%       0 = none, [1 Inf] - default = 0
%     - HVMUXID (int32) sets the HVMUX id.
%       0 = none, [1 Inf] - default = 0
%     - TPCTXE (int32) enables extended power for pushes.
%       0 = no extended power, [1 Inf] = pushes reservoir - default = 0
%     - LOCALBUFFER (int32) sets index of the local buffer.
%       [0 Inf] - default = 0
%     - DMACONTROLID (int32) sets the DMA control id.
%       0 = none, [1 Inf] - default = 0
%     - NOOP (int32) sets the dead time after event.
%       [system.hardware.MinNoop 5e5] us - default = system.hardware.MinNoop
%     - SOFTIRQ (int32) sets the soft IRQ label.
%       -1 = none, [0 Inf] = soft IRQ label - default = -1
%     - RETURN (int32) returns to calling event.
%       0 = nothing, 1 = return to calling event - default = 0
%     - GOSUBEVENTID (int32) executes a specific event.
%       0 = nothing, [1 Inf] = go to event id - default = 0
%     - WAITEXTTRIG (int32) waits for external trigger.
%       0 = no trigger in, 1 = trigger in - default = 0
%     - GENEXTTRIG (single) generates a trigger.
%       0 = no trigger out, [1e-3 720.8] us = trigger out duration - default = 0
%     - GENEXTTRIGDELAY (single) sets the trigger delay.
%       [0 1000] us = trigger out delay - default = 0
%     - DURATION (int32) sets the duration of the event.
%       0 = empty event, [1 1e7] us = event duration
%     - NUMSAMPLES (int32) sets the number of acquired samples.
%       [0 4096]
%     - SKIPSAMPLES (int32) sets the number of skipped samples.
%       [0 4096]
%
%   Note - This function is defined as a method of the remoteclass REMOTE.EVENT.
%   It cannot be used without all methods of the remoteclass REMOTE.EVENT and
%   all methods of its superclass COMMON.REMOTEOBJ developed by SuperSonic
%   Imagine and without a system with a REMOTE server running.
%
%   Copyright 2010 Supersonic Imagine
%   Revision: 1.00 - Date: 2010/07/28

function obj = initialize(obj, varargin)
   
% ============================================================================ %
% ============================================================================ %

current_class = 'remote.event';

% Start error handling
try

% ============================================================================ %
% ============================================================================ %

% Initialize COMMON.REMOTEOBJ superclass
obj = initialize@common.remoteobj(obj, varargin{1:end});

% ============================================================================ %
% ============================================================================ %

%% Add new parameters

% Id of the transmit event (default = 0)
Par = common.remotepar( ...
    'txId', ...
    'int32', ...
    'sets the transmit id', ...
    {0 [1 Inf]}, ...
    {'no transmit', 'index of transmit'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Id of the receive event (default = 0)
Par = common.remotepar( ...
    'rxId', ...
    'int32', ...
    'sets the receive id', ...
    {0 [1 Inf]}, ...
    {'no receive', 'index of receive'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Id of the HVMUX (default = 0)
Par = common.remotepar( ...
    'hvmuxId', ...
    'int32', ...
    'sets the HVMUX id', ...
    {0 [1 Inf]}, ...
    {'no hvmux', 'index of hvmux'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Extended power for pushes (default = 0)
Par = common.remotepar( ...
    'tpcTxe', ...
    'int32', ...
    'enables extended power for pushes', ...
    {0 [1 Inf]}, ...
    {'no extended power', 'extended power (pushes reservoir)'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Index of the local buffer (default = 0)
Par = common.remotepar( ...
    'localBuffer', ...
    'int32', ...
    'sets index of the local buffer', ...
    {[0 Inf]}, ...
    {'local buffer index for RX'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Id of the DMA control (default = 0)
Par = common.remotepar( ...
    'dmaControlId', ...
    'int32', ...
    'sets the DMA control id', ...
    {0 [1 Inf]}, ...
    {'no DMA', 'index of DMA control'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Dead time after event (default = system.hardware.MinNoop)
Par = common.remotepar( ...
    'noop', ...
    'int32', ...
    'sets the dead time after event with steps of 1 us', ... % todo: have 0.2 us accuracy
    {[system.hardware.MinNoop system.hardware.MaxNoop]}, ...
    {'duration of no operation [us]'}, ...
    obj.Debug, current_class );
Par = Par.setValue( system.hardware.MinNoop );
obj = obj.addParam(Par);

% ============================================================================ %

% SoftIRQ mode (default = -1)
Par = common.remotepar( ...
    'softIrq', ...
    'int32', ...
    'sets the soft IRQ label', ...
    {-1 [0 Inf]}, ...
    {'no soft IRQ', 'soft IRQ label'}, ...
    obj.Debug, current_class );
Par = Par.setValue(-1);
obj = obj.addParam(Par);

% ============================================================================ %

% Return to calling event (default = 0)
Par = common.remotepar( ...
    'return', ...
    'int32', ...
    'returns to calling event', ...
    {0 1}, ...
    {'no changes', 'return to calling event'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Go to subfunction of event x (default = 0)
Par = common.remotepar( ...
    'goSubEventId', ...
    'int32', ...
    'executes a specific event', ...
    {0 [1 Inf]}, ...
    {'no changes', 'execute event id'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Wait for external trigger (default = 0)
Par = common.remotepar( ...
    'waitExtTrig', ...
    'int32', ...
    'waits for external trigger', ...
    {0 1}, ...
    {'no waiting', 'wait for external trigger'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Generate a trigger (default = 0)
Par = common.remotepar( ...
    'genExtTrig', ...
    'single', ...
    'generates a trigger', ...
    {0 [1e-3 720.8]}, ...
    {'no trigger', 'trigger duration [us]'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Set the trigger delay (default = 0)
Par = common.remotepar( ...
    'genExtTrigDelay', ...
    'single', ...
    'sets the trigger delay', ...
    {[0 1000]}, ...
    {'trigger delay [us]'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Duration of the event
Par = common.remotepar( ...
    'duration', ...
    'int32', ...
    'sets the duration of the event', ...
    {0 [1 1e7]}, ...
    {'empty event' 'duration of the event [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Number of RX samples (default = 0)
Par = common.remotepar( ...
    'numSamples', ...
    'int32', ...
    'sets the number of acquired samples', ...
    {[0 4096]}, ...
    {'number of acquired samples, must be a multiple of 128'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Number of skipped samples (default = 0)
Par = common.remotepar( ...
    'skipSamples', ...
    'int32', ...
    'sets the number of skipped samples', ...
    {[0 4096]}, ...
    {'number of skipped samples'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %
% ============================================================================ %

%% End error handling
catch Exception
    
    % Exception in this method
    if ( isempty(Exception.identifier) )
        
        % Emit the new exception
        NewException = ...
            common.legHAL.GetException(Exception, class(obj), 'initialize');
        throw(NewException);

    % Re-emit previous exception
    else
        
        rethrow(Exception);
        
    end
    
end

% ============================================================================ %
% ============================================================================ %

end