
function obj = initialize(obj, varargin)
   
% ============================================================================ %
% ============================================================================ %

current_class = 'acmo.ultrafast';

% Start error handling
try

% ============================================================================ %
% ============================================================================ %

% Initialize ACMO.ACMO superclass
obj = initialize@acmo.acmo(obj, varargin{1:end});

% ============================================================================ %
% ============================================================================ %

%% Add new parameters

% Flat emission frequency
Par = common.parameter( ...
    'TwFreq', ...
    'single', ...
    'sets the flat emission frequency', ...
    {[0.5 system.hardware.MaxTxFreq]}, ...
    {'flat emission frequency [MHz]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Number of half cycle
Par = common.parameter( ...
    'NbHcycle', ...
    'int32', ...
    'sets the number of half cycle', ...
    {[1 200]}, ...
    {'number of half cycle'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Steer angles
Par = common.parameter( ...
    'FlatAngles', ...
    'single', ...
    'sets the flat angles', ...
    {[-40 40]}, ...
    {'flat angles [deg]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Pulse repetition frequency
Par = common.parameter( ...
    'PRF', ...
    'single', ...
    'sets the pulse repetition frequency', ...
    {0 [1/system.hardware.MaxNoop 1e6/system.hardware.MinNoop]}, ...
    {'greatest pulse repetition frequency', ...
    'pulse repetition frequency [Hz]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Frame rate Ultrafast
Par = common.parameter( ...
    'FrameRateUF', ...
    'single', ...
    'sets frame rate for ultrafast frames', ...
    {0 [1e6/system.hardware.MaxNoop 1e6/system.hardware.MinNoop]}, ...
    {'greatest frame rate', ...
    'frame rate [Hz]'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% Frame rate
Par = common.parameter( ...
    'FrameRate', ...
    'single', ...
    'sets the sequence frame rate (number of DMA per s)', ...
    {0 [1/(3600*1e6) 1e6/system.hardware.MinNoop]}, ...
    ... {0 [1e6/system.hardware.MaxNoop 1e6/system.hardware.MinNoop]}, ...
    {'greatest frame rate', ...
    'frame rate [Hz]'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Maximum duty cycle
Par = common.parameter( ...
    'DutyCycle', ...
    'single', ...
    'sets the maximum duty cycle', ...
    {[0 1]}, ...
    {'maximum duty cycle'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Transmit center position
Par = common.parameter( ...
    'TxCenter', ...
    'single', ...
    'sets the transmit center position', ...
    {[0 Inf]}, ...
    {'transmit center position [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Transmit width
Par = common.parameter( ...
    'TxWidth', ...
    'single', ...
    'sets the transmit width', ...
    {[0 Inf]}, ...
    {'transmit width [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Apodisation function
Par = common.parameter( ...
    'ApodFct', ...
    'char', ...
    'sets the apodisation function', ...
    {'none' 'bartlett' 'blackman' 'connes' 'cosine' 'gaussian' 'hamming' ...
        'hanning' 'welch'}, ...
    {'no apodisation' 'bartlett function' 'blackman function' ...
        'connes function' 'cosine function' 'gaussian function' ...
        'hamming function' 'hanning function' 'welch function'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Flat reception frequency
Par = common.parameter( ...
    'RxFreq', ...
    'single', ...
    'sets the sampling frequency', ...
    {[1 60]}, ...
    {'flat reception frequency [MHz]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Receive center position
Par = common.parameter( ...
    'RxCenter', ...
    'single', ...
    'sets the receive center position', ...
    {[0 100]}, ...
    {'receive center position [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Receive width
Par = common.parameter( ...
    'RxWidth', ...
    'single', ...
    'sets the receive width', ...
    {[0 Inf]}, ...
    {'receive width [mm]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Acquisition duration
Par = common.parameter( ...
    'RxDuration', ...
    'single', ...
    'sets the acquisition duration', ...
    {[0 1000]}, ...
    {'acquisition duration [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Acquisition delay
Par = common.parameter( ...
    'RxDelay', ...
    'single', ...
    'sets the acquisition delay', ...
    {[0 1000]}, ...
    {'acquisition delay [us]'}, ...
    obj.Debug, current_class );
obj = obj.addParam(Par);

% ============================================================================ %

% Decimation mode (default = 2)
Par = common.parameter( ...
    'RxBandwidth', ...
    'int32', ...
    'sets the decimation mode', ...
    {1 2 3}, ...
    {'no decimation', '100% mode', '50% mode'}, ...
    obj.Debug, current_class );
Par = Par.setValue(2);
obj = obj.addParam(Par);

% ============================================================================ %

% Definition of the digital filter coefficients (default = 100)
Par = common.parameter( ...
    'FIRBandwidth', ...
    'int32', ...
    'sets the digital filter coefficients', ...
    {-1 [0 100]}, ...
    {'FIR BP coeffs for impulse', 'Load pre-calculated FIR BP coeffs'}, ...
    obj.Debug, current_class );
Par = Par.setValue(100);
obj = obj.addParam(Par);

% ============================================================================ %

% Trigger in (default = 0)
Par = common.parameter( ...
    'TrigIn', ...
    'int32', ...
    'enables the trigger in', ...
    {0 1}, ...
    {'no trigger in', 'trigger in activated'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Trigger out (default = 0)
Par = common.parameter( ...
    'TrigOut', ...
    'single', ...
    'enables the trigger out', ...
    {0 [1e-3 720.8]}, ...
    {'no trigger out', 'trigger duration [us]'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Trigger out delay (default = 0)
Par = common.parameter( ...
    'TrigOutDelay', ...
    'single', ...
    'sets the trigger out delay', ...
    {[0 1000]}, ...
    {'trigger delay [us]'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Triggers (in&out) on all events (default = 0)
Par = common.parameter( ...
    'TrigAll', ...
    'int32', ...
    'enables triggers on all events', ...
    {0 1}, ...
    {'triggers on 1st event', 'triggers on all events'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

% Repetition of the flat events
Par = common.parameter( ...
    'RepeatFlat', ...
    'int32', ...
    'sets the number of events repetition', ...
    {[1 100000]}, ...
    {'number of flat events repetitions'}, ...
    obj.Debug, current_class );
Par = Par.setValue(1);
obj = obj.addParam(Par);


% ============================================================================ %

Par = common.parameter( ...
    'TxPolarity', ...
    'int32', ...
    'Set the elements polarity of successive Tx for each focused line', ...
    {[0 1]}, ...
    {'0: Standard polarity, 1:Inverted polarity'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);

% ============================================================================ %

Par = common.parameter( ...
    'TxElemsPattern', ...
    'int32', ...
    'Set the elements pattern of successive Tx for each focused line', ...
    {[0 2]}, ...
    {'0: All elements, 1: Odd elements, 2: Even elements'}, ...
    obj.Debug, current_class );
Par = Par.setValue(0);
obj = obj.addParam(Par);


% ============================================================================ %
% ============================================================================ %

%% End error handling
catch Exception
    
    % Exception in this method
    if ( isempty(Exception.identifier) )
        
        % Emit the new exception
        NewException = ...
            common.legHAL.GetException(Exception, class(obj), 'initialize');
        throw(NewException);

    % Re-emit previous exception
    else
        
        rethrow(Exception);
        
    end
    
end

% ============================================================================ %
% ============================================================================ %

end