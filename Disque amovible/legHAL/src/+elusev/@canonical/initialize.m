function obj = initialize(obj, varargin)
   
% ============================================================================ %
% ============================================================================ %

current_class = 'elusev.canonical';

try
    
% Initialize superclass
    obj = initialize@elusev.elusev(obj, varargin{1:end});
    
% ============================================================================ %

    % Transmitting elements
    Par = common.parameter( ...
        'TxElemts', 'int32', 'set the emitting elements', ...
        {[1 system.hardware.NbTxChan]}, ...
        {'emitting elemts'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);

% ============================================================================ %

    % Delays
    % TODO: verify limit max
    Par = common.parameter( ...
        'TxDelays', 'single', 'set the delays for each transmitting elements', ...
        {[0 200]}, {'delays [us]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);
    
% ============================================================================ %

    % Emission frequency
    Par = common.parameter( ...
        'TwFreq', 'single', 'set the emission frequency', ...
        {[0.9 system.hardware.MaxTxFreq]}, ...
        {'flat emission frequency [MHz]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);

% ============================================================================ %

    % Number of half cycle
    Par = common.parameter( ...
        'NbHcycle', 'int32', 'set the number of half cycle', ...
        {[1 2048]}, ... % because limit is 1024 for tw_pulse
        {'number of half cycle'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);
    
% ============================================================================ %

    % HIFU duty cycle
    Par = common.parameter( ...
        'DutyCycle', 'single', 'set the waveform duty cycle', ...
        {[0 1]}, ...
        {'waveform duty cycle'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);

% ============================================================================ %

    % Transmitting elements
    Par = common.parameter( ...
        'RxElemts', 'int32', 'set the reception elements', ...
        {[-1 system.hardware.NbTxChan]}, ...
        {'emitting elemts'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);
    
% ============================================================================ %

    % Reception frequency
    Par = common.parameter( ...
        'RxFreq', 'single', 'set the reception frequency', ...
        {[1 60]}, ...
        {'reception frequency [MHz]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);

% ============================================================================ %

    % Acquisition delay
    % TODO: verify limit max, check if per chan rx delay possible ?
    Par = common.parameter( ...
        'RxDelay', 'single', 'set the acquisition delay', ...
        {[0 1000]}, ...
        {'acquisition delay [us]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);
    
% ============================================================================ %

    % Acquisition duration
    % TODO: verify limit max
    Par = common.parameter( ...
        'RxDuration', 'single', 'set the acquisition duration', ...
        {[0 1000]}, ...
        {'acquisition duration [us]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);

% ============================================================================ %

    % VGA input filtering
    if strcmp( system.hardware.Tag, 'BTE' )
        Par = common.remotepar( ...
            'VGAInputFilter', ...
            'int32', ...
            'sets measurement type', ...
            { 0 3 }, ...
            { 'Intensity measurement', 'Voltage measurement' }, ...
            obj.Debug, current_class );
        Par = Par.setValue(3);
    else
        Par = common.remotepar( ...
            'VGAInputFilter', ...
            'int32', ...
            'sets notches to block frequencies', ...
            { 0 4 2 1 }, ...
            { 'no notch', 'notch @ 2.25 MHz', 'notch @ 3.75 MHz', 'notch @ 5.5 MHz' }, ...
            obj.Debug, current_class );
        Par = Par.setValue(0);
    end    
    obj = obj.addParam(Par);

% ============================================================================ %

    % Decimation mode
    Par = common.parameter( ...
        'QFilter', 'int32', 'set the decimation mode', ...
        {1 2 3}, ...
        {'no decimation', '100% mode', '50% mode'}, ...
        obj.Debug, current_class );
    Par = Par.setValue(1);
    obj = obj.addParam(Par);

% ============================================================================ %

    % Definition of the digital filter coefficients
    Par = common.parameter( ...
        'Bandwidth', 'int32', 'define the digital filter coefficients', ...
        {-1 [0 100]}, ...
        {'FIR BP coeffs for impulse', 'Load pre-calculated FIR BP coeffs'}, ...
        obj.Debug, current_class );
    Par = Par.setValue(100);
    obj = obj.addParam(Par);
    
% ============================================================================ %

    % Pause duration after the event
    Par = common.parameter( ...
        'Pause', 'int32', 'set the pause duration after the event', ...
        {[system.hardware.MinNoop 1e6]}, ...
        {'pause duration after each emission event [us]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);
    
% ============================================================================ %

    % Pause duration at the end
    Par = common.parameter( ...
        'PauseEnd', 'int32', 'set the pause duration at the end', ...
        {[system.hardware.MinNoop 1e6]}, ...
        {'pause duration at the end [us]'}, ...
        obj.Debug, current_class );
    obj = obj.addParam(Par);

% ============================================================================ %


catch exception
    
    uiwait(errordlg(exception.message, exception.identifier));
    
end

% ============================================================================ %
% ============================================================================ %

end