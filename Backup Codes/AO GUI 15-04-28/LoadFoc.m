% ATTENTION !! Même si la séquence US n'écoute pas, il faut quand même
% définir les remote.fc et remote.rx, ainsi que les rxId des events.
%
% DO NOT USE CLEAR OR CLEAR ALL use clearvars instead

display('Building sequence')

addpath('D:\legHAL')
addPathLegHAL;

% System parameters (parametres ajustables)
AixplorerIP    = '192.168.1.16'; % IP address of the Aixplorer device

CP.ImgVoltage = 50;             % imaging voltage [V]
CP.ImgCurrent = 1;            % security limit for imaging current [A]

% ======================================================================= %

CP.TwFreq     = 8;       % MHz
CP.NbHcycle   = 4;     %
CP.PosX       = 15;              % mm
CP.PosZ       = 20;             % mm
CP.TxWidth    = 10;           % mm
CP.Prof       = 40;            % mm
CP.ScanLength = 1;      % mm

CP.SampFreq   = system.hardware.ClockFreq; % NE PAS MODIFIER % emitted signal sampling
CP.PRF        = common.constants.SoundSpeed*1e-3/CP.Prof;  % pulse frequency repetition [MHz]
CP.FIRBandwidth = 90;              % FIR receiving bandwidth [%] - center frequency = UF.TwFreq
CP.DutyCycle  = 1;               % duty cycle [0, 1]

CP.TrigOut    = 50; %CP.Prof*common.constants.SoundSpeed*1e-3;

CP.Repeat     = 1;              % a voir

CP.Pause      = max(100-ceil(1/CP.PRF),system.hardware.MinNoop); % pause duration in µs
CP.RxFreq     = 60;

CP.numSamples =  128;

% ======================================================================= %
%% Codage en arbitrary : delay matrix and waveform

Delay = sqrt(CP.PosZ^2+(CP.TxWidth/2)^2)/(common.constants.SoundSpeed*1e-3) ...
    - 1/(common.constants.SoundSpeed*1e-3)*sqrt(CP.PosZ^2+((0:system.probe.Pitch:CP.TxWidth)-CP.TxWidth/2).^2);

DlySmpl=round(Delay*CP.SampFreq);

T_Wf = 0:1/CP.SampFreq:0.5*CP.NbHcycle/CP.TwFreq;
Wf = sin(2*pi*CP.TwFreq*T_Wf);

N_T = length(Wf) + max(DlySmpl);
WF_mat = zeros(N_T,length(Delay));

for j = 1:size(WF_mat,2)
    WF_mat(DlySmpl(j)+(1:length(Wf)),j) = Wf;
end

WF_mat_sign = sign(WF_mat); % l'aixplorer code sur 3 niveaux [-1,0,1]

figure(470)
imagesc(WF_mat_sign)

% ======================================================================= %
%% Arbitrary definition of US events

% Elusev
clear ELUSEV EVENTList TWList TXList TRIG ACMO ACMOList SEQ

FC = remote.fc('Bandwidth', CP.FIRBandwidth , 0);
RX = remote.rx('fcId', 1, 'RxFreq', CP.RxFreq, 'QFilter', 2, 'RxElemts', 0, 0);

if round((CP.PosX+CP.ScanLength)/system.probe.Pitch)>system.probe.NbElemts
    
    warning('Scan length too long, set to maximum value')
    CP.ScanLength=system.probe.NbElemts*system.probe.Pitch-CP.PosX;
    
end

for nbs = 1:round(CP.ScanLength/system.probe.Pitch)
    
    EvtDur   = ceil(0.5*CP.NbHcycle/CP.TwFreq + max(Delay) + 1/CP.PRF);
    
    PosX     = CP.PosX + (nbs-1)*system.probe.Pitch;    
    
    MedElmt  = round(PosX/system.probe.Pitch);
    
    TxElemts = MedElmt-round(CP.TxWidth/(2*system.probe.Pitch)):...
        MedElmt+floor(CP.TxWidth/(2*system.probe.Pitch));
    
    WFtmp    = WF_mat_sign( : , ( TxElemts>0 & TxElemts<=system.probe.NbElemts ) );
    
    figure(471)
    imagesc(WFtmp)
    drawnow
    
    % Flat TX
    TXList{nbs} = remote.tx_arbitrary('txClock180MHz', 1,'twId',nbs);
    %TXList = remote.tx_arbitrary('txClock180MHz', 1,'twId',nbs);
    
    % Arbitrary TW
        %TWList = remote.tw_arbitrary( ...
    TWList{nbs} = remote.tw_arbitrary( ...
        'Waveform',WFtmp', ...
        'RepeatCH', 0, ...
        'repeat', 0, ...
        'repeat256', 0, ...
        'ApodFct', 'none', ...
        'TxElemts',TxElemts( TxElemts>0 & TxElemts<=system.probe.NbElemts ), ...
        'DutyCycle', CP.DutyCycle, ...
        0);
    
    
    % Event
    EVENTList{nbs} = remote.event( ...
        'txId', nbs, ...
        'rxId', 1, ...
        'noop', CP.Pause, ...
        'numSamples', 128, ...
        'skipSamples', 0, ... 128, ...
        'duration', EvtDur, ...
        0);
    
%     ELUSEV = elusev.elusev( ...
%         'tx',           TXList, ...
%         'tw',           TWList, ...
%         'rx',           RX,...
%         'event',        EVENTList, ...
%         'TrigOut',      CP.TrigOut,...
%         'TrigIn',       0,...
%         'TrigAll',      1, ...
%         'TrigOutDelay', 0, ...
%         0);
%     
%     ACMO{nbs} = acmo.acmo( ...
%         'elusev',           ELUSEV, ...
%         'Ordering',         0, ...
%         'Repeat' ,          1, ...
%         'NbHostBuffer',     1, ...
%         'NbLocalBuffer',    1, ...
%         0);
    
end
% 
% TRIG = remote.event(...
%     'noop',         200, ...
%     'duration',     0,... % ï¿½s%     'genExtTrig',
%     1);

% ======================================================================= %
%% ELUSEV and ACMO definition

% %ELUSEV
% ELUSEV{1} = elusev.elusev( ...
%     'event',        TRIG, ...
%     'TrigIn',       0,...
%     'TrigOut',      CP.TrigOut, ... % trig out duration  microsecond
%     'TrigAll',      0, ...
%     'TrigOutDelay', 0, ...
%     0);

ELUSEV = elusev.elusev( ...
    'tx',           TXList, ...
    'tw',           TWList, ...
    'rx',           RX,...
    'fc',           FC,...
    'event',        EVENTList, ... 
    'TrigOut',      CP.TrigOut, ... 0,...
    'TrigIn',       0,...
    'TrigAll',      0, ...
    'TrigOutDelay', 0, ...
    0);

%ACMO
ACMO = acmo.acmo( ...
    'elusev',           ELUSEV, ...
    'Ordering',         1, ... 
    'Repeat' ,          1, ...
    'NbHostBuffer',     1, ...
    'NbLocalBuffer',    1, ...
    'ControlPts',       900, ... [900 900],...
    'RepeatElusev',     1, ...
    0);

ACMOList{1} = ACMO;

% ======================================================================= %
%% Build sequence

% Probe Param
TPC = remote.tpc( ...
    'imgVoltage', CP.ImgVoltage, ...
    'imgCurrent', CP.ImgCurrent, ...
    0);

% USSE for the sequence
SEQ = usse.usse( ...
    'TPC', TPC, ...
    'acmo', ACMOList, ...    'Loopidx',1, ...
    'Repeat', CP.Repeat, ...    'Popup',0, ...
    'DropFrames', 0, ...
    'Loop', 0, ...
    0);

[SEQ NbAcq] = SEQ.buildRemote();
display('Build OK')

%% Do NOT CHANGE - Sequence execution

% Initialize remote on systems
SEQ = SEQ.initializeRemote('IPaddress',AixplorerIP);
display('Remote OK')

% Load sequ
SEQ = SEQ.loadSequence();
display('Load OK')


disp('-------------Sequence loaded, ready to use-------------------- ')